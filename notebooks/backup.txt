Age / Experience Related Purchasing Feature Subset
The age related purchasing habits features were selected as an interesting feature subset in order to explore clustering trends in age based / influenced online purchasing versus non purchasing habits associated with internet usage. This has been grouped in dict ageFeatures below:

agePurchasingFeatures = ['Age', 'Years_on_Internet', 'Web_Ordering', 'Registered_to_Vote', 'Country', 'Not_Purchasing_Too_complicated', 'Not_Purchasing_Prefer_people', 'Not_Purchasing_Privacy', 'Not_Purchasing_Security', 'Not_Purchasing_Easier_locally']
agePurchasingFeatures = ['Age', 'Years_on_Internet', 'Web_Ordering', 'Registered_to_Vote', 'Country', 'Not_Purchasing_Too_complicated', 'Not_Purchasing_Prefer_people', 'Not_Purchasing_Privacy', 'Not_Purchasing_Security', 'Not_Purchasing_Easier_locally']

Clustering Task 2
For each candidate feature subset, use hierarchical clustering, k-means, GMM and DBSCAN algorithms on it to identify possible groups of internet users.

Data Encoding
This section will prepare data by use of one hot encoding to convert all column values to numeric for use with clustering algorithms.

from sklearn.preprocessing import OneHotEncoder
import random
​
featureStringCols = ['Years_on_Internet', 'Web_Ordering', 'Country']
featureBoolCols = ['Registered_to_Vote','Not_Purchasing_Too_complicated', 'Not_Purchasing_Prefer_people',
                                'Not_Purchasing_Privacy', 'Not_Purchasing_Security', 'Not_Purchasing_Easier_locally']
featureIntCols = ['Age']
​
for col in featureIntCols:
  df[col] = pd.to_numeric(df[col], errors='coerce')
​
for col in featureBoolCols:
  df[col] = df[col].map({'0': 0, '1': 1})
​
ohe = dict()
​
# Choose a seed so that this code is repeatable, and select some features for the model
random.seed(42)
originalStrCols = random.sample(featureStringCols,k=3)
print(originalStrCols)
sampledBoolCols = random.sample(featureBoolCols,k=6)
print(sampledBoolCols)
sampledIntCols = random.sample(featureIntCols,k=1)
print(sampledIntCols)
​
# Create an empty dataframe
featureSub = pd.DataFrame()
​
for col in originalStrCols:
  ohe[col] = OneHotEncoder(sparse=False)
  X = ohe[col].fit_transform(df[col].values.reshape(-1,1))
  # See https://stackoverflow.com/a/4843172
  dfOneHot = pd.DataFrame(X, columns = [col+'-'+str(int(i)) for i in range(X.shape[1])])
  featureSub = pd.concat([featureSub, dfOneHot], axis=1)
​
# Assign the index so that it matches that of the original df
featureSub.set_axis(df.index, axis='index', inplace=True)
​
# Add in the sampledBoolcols
featureSub = pd.concat([featureSub, df[sampledBoolCols]], axis=1)
​
# Add in the sampledIntcols
featureSub = pd.concat([featureSub, df[sampledIntCols]], axis=1)
​
# The following is the matrix of samples x features
featureSub.head(10)

Lastly, if you wish to transform the one-hot-encoded features back to their original form, you can use something like:

dx = dict()
for col in originalStrCols:
  derivedCol = [s for s in dfSub.columns if col+'-' in s]
  dx[col] = ohe[col].inverse_transform(dfSub[derivedCol])
print(dx)
dx = dict()
for col in originalStrCols:
  derivedCol = [s for s in dfSub.columns if col+'-' in s]
  dx[col] = ohe[col].inverse_transform(dfSub[derivedCol])
print(dx)


import sklearn.mixture as mixture
import time
import seaborn as sns
import sklearn.cluster as cluster
import sys
sys.path.append('../../w7support')
import w7support as w8s

# Make sure the pic subdirectory exists
import os, errno
try:
    os.makedirs('pic')
except OSError as e:
    if e.errno != errno.EEXIST:
        raise

algName = "GaussianMixture"
nClusters = 6

for covType in ['spherical', 'full']:
    clusterParams = {'n_components':6, 'covariance_type':covType, 'max_iter':100, 'random_state':0}
    start_time = time.time()
    gaussianMixture = mixture.GaussianMixture(**clusterParams)
    #print(dir(gaussianMixture))
    labels = gaussianMixture.fit(featureSub).predict(featureSub)
    # Subsequently, this will be invoked using a function call of the form
    # gaussianMixture, labels = w8s.fitClusterLabels(data, mixture.GaussianMixture, (), clusterParams)
    end_time = time.time()
    elapsed_time = end_time-start_time
    print(elapsed_time)
    #plt, elapsed_time = w8s.plot_clusters(data, mixture.GaussianMixture, (), clusterParams, plot_kwds)

    plt.clf() # Start new plot
    title = '{} Clusters found by {}'.format(str(nClusters),algName)
    plt = w8s.plot_2dClusters(featureSub, labels, title, paletteName, fontSize, plot_kwds)
    outFile = 'pic/{}{}_{}_generated.pdf'.format(algName,str(nClusters),covType)
    plt.savefig(outFile)

    title = '{} Clusters (with regions) found by {}'.format(str(nClusters),algName)
    weights = gaussianMixture.weights_
    means = gaussianMixture.means_
    covariances = gaussianMixture.covariances_
    plt = w8s.overlayEllipses(plt, weights, means, covariances)
    outFile = 'pic/{}{}_{}_withEllipses_generated.pdf'.format(algName,str(nClusters),covType)
    plt.savefig(outFile)



    ax1 = tempDF.plot(kind='scatter', x='Age', y='Not_Purchasing_Too_complicated', color='r')
    ax2 = tempDF.plot(kind='scatter', x='Age', y='Not_Purchasing_Easier_locally', color='g', ax=ax1)
    ax3 = tempDF.plot(kind='scatter', x='Age', y='Not_Purchasing_Security', color='b', ax=ax1)
    ax4 = tempDF.plot(kind='scatter', x='Age', y='Not_Purchasing_Prefer_people', color='purple', ax=ax1)
    ax5 = tempDF.plot(kind='scatter', x='Age', y='Years_on_Internet-0', color='orange', ax=ax1)
    ax6 = tempDF.plot(kind='scatter', x='Age', y='Years_on_Internet-1', color='pink', ax=ax1)
    ax7 = tempDF.plot(kind='scatter', x='Age', y='Not_Purchasing_Privacy', color='black', ax=ax1)
    ax8 = tempDF.plot(kind='scatter', x='Age', y='Years_on_Internet-2', color='black', ax=ax1)
    ax9 = tempDF.plot(kind='scatter', x='Age', y='Years_on_Internet-3', color='black', ax=ax1)
    ax10 = tempDF.plot(kind='scatter', x='Age', y='Years_on_Internet-4', color='black', ax=ax1)
    ax11 = tempDF.plot(kind='scatter', x='Age', y='Web_Ordering-0', color='black', ax=ax1)
    ax12 = tempDF.plot(kind='scatter', x='Age', y='Web_Ordering-1', color='black', ax=ax1)
    ax13 = tempDF.plot(kind='scatter', x='Age', y='Web_Ordering-2', color='black', ax=ax1)